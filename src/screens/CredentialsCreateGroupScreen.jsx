import React, { Component } from 'react';
import { connect } from 'react-redux';
import actions from 'actions';
import { CredentialsActions } from '../store/actionCreators';
import Responsive from '../components/common/Responsive';


class CredentialsCreateGroupScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      groupName: '',
      showOption: false,
      projectList: [],
      groupId: null,
    };
    this.handleNextButton = this.handleNextButton.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.onChangeClickCheckBox = this.onChangeClickCheckBox.bind(this);
    this.onChangeClickDiv = this.onChangeClickDiv.bind(this);
  }

  componentWillMount() {
    const { id } = this.props.match.params;
    this.setState({
      groupId: id,
    });
  }

  handleChange(e) {
    this.setState({ groupName: e.target.value });
    if (e.target.value !== '') {
      this.setState({
        showOption: true,
      });
    } else {
      this.setState({
        showOption: false,
      });
    }
  }

  handleNextButton() {
    const { pushRoute } = this.props;
    const { groupName, projectList } = this.state;

    console.log(projectList);

    CredentialsActions.addData({ screenName: 'groups', data: { groupName: groupName || 'default', projectList } });
    pushRoute('/credentials/groups');
  }

  onChangeClickCheckBox(e, item) {
    const { projectList } = this.state;
    if (e.target.checked) {
      projectList.push(item);
    } else {
      this.setState({
        projectList: projectList.filter(list => list.id !== item.id),
      });
    }
  }

  onChangeClickDiv(e, item) {
    const { projectList } = this.state;
    if (!e.currentTarget.parentElement.children[0].checked) {
      projectList.push(item);
    } else {
      this.setState({
        projectList: projectList.filter(list => list.id !== item.id),
      });
    }
    e.currentTarget.parentElement.children[0].checked = !e.currentTarget.parentElement.children[0].checked;
  }

  render() {
    const { handleChange, handleNextButton, onChangeClickCheckBox, onChangeClickDiv } = this;
    const { groupName, showOption } = this.state;
    const { projectsList } = this.props;

    return (
      <Responsive>
        <div className="credentials-create-group">
          <div className="title">
            <h1>Set Group Name</h1>
          </div>
          <div className="subTitle">
            <h2>Set group details</h2>
          </div>
          <div className="subDescription">
            <p>Specify a group name. Group names can be edited any time.</p>
          </div>
          <div className="input-wrapper">
            <div className="info">
              Group Name:<upper>*</upper>
            </div>
            <div className="input-box-wrapper">
              <div className="input-box"><input type="text" value={groupName} onChange={handleChange} /><i className="material-icons">remove_circle</i></div>
            </div>
          </div>
          { showOption ? ( 
            <div>
              <div className="subTitle">
                <h2>Select Project List</h2>
              </div>
              <div className="subDescription">
                <p>Select how these users will access AWS. Access keys and autogenerated passwords are provided in the last step. <a>Learn more</a></p>
              </div>
              <div className="input-wrapper">
                <div className="info">
                  Project Name
                </div>
                <div className="input-box-wrapper">
                  {
                    projectsList && projectsList.map((item, i) => (
                      <div className="check-box" key={i}>
                        <input type="checkbox" onChange={e => onChangeClickCheckBox(e, item)} />
                        <div onClick={e => onChangeClickDiv(e, item)}><strong>{item.name}</strong><br />
                        Enables an <strong>access key ID</strong> and <strong>secret access key</strong> for the AWS API, CLI, SDK, and other development tools.
                        </div>
                      </div>
                    ))
                  }
                </div>
              </div>
            </div>
            ) : null }
          <div className="bottom-button-wrapper">
            <div className="required">* Required</div>
            <div className="button-wrapper">
              <div className="cancel-button">Cancel</div>
              <div className="next-button" onClick={handleNextButton}>Next</div>
            </div>
          </div>
        </div>
      </Responsive>
    );
  }
}

export default connect(({ projects }) => ({
  projectsList: projects.list,
}), actions)(CredentialsCreateGroupScreen);

