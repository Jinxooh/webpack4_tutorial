import React, { Component } from 'react';
import { connect } from 'react-redux';
import actions from 'actions';
import { CredentialsActions } from '../store/actionCreators';
import Responsive from '../components/common/Responsive';
import ReadWrtieBox from '../components/common/ReadWriteBox';

class CredentialsCreateRoleScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      roleName: '',
      showOption: false,
      showNextButton: true,
    };
    this.handleNextButton = this.handleNextButton.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  componentWillReceiveProps(nextProps) {
    const { tempServiceList } = nextProps;
    this.setState({
      showNextButton: true,
    });
    tempServiceList.forEach(element => {
      if (element.disabled) {
        if (!element.read && !element.write) {
          this.setState({
            showNextButton: false,
          });
        }
      }
    });
  }

  handleChange(e) {
    this.setState({ roleName: e.target.value });
    if (e.target.value !== '') {
      this.setState({
        showOption: true,
      });
    } else {
      this.setState({
        showOption: false,
      });
    }
  }

  handleNextButton() {
    const { pushRoute, tempServiceList } = this.props;
    const { roleName } = this.state;


    CredentialsActions.addData({ screenName: 'roles', data: { roleName: roleName || 'default', serviceList: tempServiceList } });
    pushRoute('/credentials/roles');
  }

  onChange(e) {
    const { name, value, checked } = e.target;
    CredentialsActions.changeCheckbox({ name, value, checked });
  }

  onChangeDiv(name, value, checked) {
    console.log(name);
    CredentialsActions.changeCheckbox({ name, value, checked });
  }

  render() {
    const { handleChange, handleNextButton, onChange, onChangeDiv } = this;
    const { roleName, showOption, showNextButton } = this.state;
    const { tempServiceList } = this.props;

    return (
      <Responsive>
        <div className="credentials-create-group">
          <div className="title">
            <h1>Set Role Name</h1>
          </div>
          <div className="subTitle">
            <h2>Set role details</h2>
          </div>
          <div className="subDescription">
            <p>Specify a role name. Role names can be edited any time.</p>
          </div>
          <div className="input-wrapper">
            <div className="info">
              Role Name:<upper>*</upper>
            </div>
            <div className="input-box-wrapper">
              <div className="input-box"><input type="text" value={roleName} onChange={handleChange} /><i className="material-icons">remove_circle</i></div>
            </div>
          </div>
          { showOption ? (
            <div>
              <div className="subTitle">
                <h2>Select Project List</h2>
              </div>
              <div className="subDescription">
                <p>Select how these users will access AWS. Access keys and autogenerated passwords are provided in the last step. <a>Learn more</a></p>
              </div>
              <div className="input-wrapper">
                <div className="info">
                  Service Name
                </div>
                <div className="input-box-wrapper">
                  {
                    tempServiceList && tempServiceList.map((item, idx) => (
                      <ReadWrtieBox
                        key={idx}
                        onChange={onChange}
                        onClick={onChangeDiv}
                        name={item.name}
                        read={item.read}
                        write={item.write}
                        disabled={item.disabled}
                      />
                    ))
                  }
                </div>
              </div>
            </div>
            ) : null }
          <div className="bottom-button-wrapper">
            <div className="required">* Required</div>
            <div className="button-wrapper">
              <div className="cancel-button">Cancel</div>
              { showOption && showNextButton && (<div className="next-button" onClick={handleNextButton}>Next</div>)}
            </div>
          </div>
        </div>
      </Responsive>
    );
  }
}

export default connect(({ projects, credentials }) => ({
  projectsList: projects.list,
  tempServiceList: credentials.serviceList,
}), actions)(CredentialsCreateRoleScreen);

