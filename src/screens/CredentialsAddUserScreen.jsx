import React, { Component } from 'react';
import { connect } from 'react-redux';
import actions from 'actions';
import { CredentialsActions } from '../store/actionCreators';

import Responsive from '../components/common/Responsive';
import { CheckBox } from '../components/common/CheckBox';

class CredentialsAddUserScreen extends Component {
  constructor(props) {
    super(props);
    this.state = {
      userName: '',
      showSubMenu: false,
      groupList: [],
      roleList: [],
    };
    this.handleNextButton = this.handleNextButton.bind(this);
    this.handleChange = this.handleChange.bind(this);
    this.onChange = this.onChange.bind(this);
  }

  handleChange(e) {
    this.setState({ userName: e.target.value });
    if (e.target.value !== '') {
      this.setState({
        showSubMenu: true,
      });
    } else {
      this.setState({
        showSubMenu: false,
      });
    }
  }

  handleNextButton() {
    const { pushRoute } = this.props;
    const { userName, roleList, groupList } = this.state;
    CredentialsActions.addData({ screenName: 'users', data: { userName: userName || 'default', sid: '123123', roleList, groupList } });
    pushRoute('/credentials/users');
  }

  onChange(e, item) {
    console.log(item);
    const { checked } = e.target;
    if (item.roleName) {
      const { roleList } = this.state;
      if (checked) {
        roleList.push(item);
      } else {
        this.setState({
          roleList: roleList.filter(t => t.id !== item.id),
        });
      }
    }
    if (item.groupName) {
      const { groupList } = this.state;
      if (checked) {
        groupList.push(item);
      } else {
        this.setState({
          groupList: groupList.filter(t => t.id !== item.id),
        });
      }
    }
  }

  render() {
    const {
      handleChange,
      handleNextButton,
      onChange,
    } = this;
    const { roleList, groupList } = this.props;
    const {
      userName,
      showSubMenu,
    } = this.state;

    return (
      <Responsive>
        <div className="credentials-add-user">
          <div className="title">
            <h1>Add User</h1>
          </div>
          <div className="subTitle">
            <h2>Set user details</h2>
          </div>
          <div className="subDescription">
            <p>You can add multiple users at once with the same access type and permissions. <a>Learn more</a></p>
          </div>
          <div className="input-wrapper">
            <div className="info">
              User name<div>*</div>
            </div>
            <div className="input-box-wrapper">
              <div className="input-box"><input type="text" value={userName} onChange={handleChange} /><i className="material-icons">remove_circle</i></div>
              <div className="add-button"><i className="material-icons">add_circle</i>Add another user</div>
            </div>
          </div>
          { showSubMenu && groupList.length !== 0 ? (
            <div>
              <div className="subTitle">
                <h2>Select Add Group</h2>
              </div>
              <div className="subDescription">
                <p>Select how these users will access AWS. Access keys and autogenerated passwords are provided in the last step. <a>Learn more</a></p>
              </div>
              <div className="input-wrapper">
                <div className="info">
                  Group Type
                </div>
                <div className="input-box-wrapper">
                  { 
                    groupList && groupList.map((item, idx) => (
                      <CheckBox
                        key={idx}
                        name={item.groupName}
                        onChange={onChange}
                        item={item}
                      />
                    ))
                  }
                </div>
              </div>
            </div>
          ) : null }
          { showSubMenu && roleList.length !== 0 ? (
            <div>
              <div className="subTitle">
                <h2>Select Add Role</h2>
              </div>
              <div className="subDescription">
                <p>Select how these users will access AWS. Access keys and autogenerated passwords are provided in the last step. <a>Learn more</a></p>
              </div>
              <div className="input-wrapper">
                <div className="info">
                  Role Type
                </div>
                <div className="input-box-wrapper">
                  {
                    roleList.map((item, idx) => (
                      <CheckBox
                        key={idx}
                        name={item.roleName}
                        onChange={onChange}
                        item={item}
                      />
                    ))
                  }
                </div>
              </div>
            </div>
          ) : null }
          <div className="bottom-button-wrapper">
            <div className="required">* Required</div>
            <div className="button-wrapper">
              <div className="cancel-button">Cancel</div>
              { showSubMenu && (<div className="next-button" onClick={handleNextButton}>Next</div>)}
            </div>
          </div>
        </div>
      </Responsive>
    );
  }
}

export default connect(({ credentials }) => ({
  roleList: credentials.roles.list,
  groupList: credentials.groups.list,
}), actions)(CredentialsAddUserScreen);
